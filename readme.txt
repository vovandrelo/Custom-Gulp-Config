<================================================================================================================>
<============================================ НАСТРОЙКА PACKAGE.JSON ============================================>
<================================================================================================================>

В качестве основного файла в package.json указывается gulpfile.js

Для корректной работы системы импортов/экспортов в package.json указывается: "type":"module"

<================================================================================================================>
<============================================== СТРУКТУРА ПРОЕКТА ===============================================>
<================================================================================================================>

Структура проекта:
- dist - результирующая папка с проектом, создаётся автоматически
  - css - результирующий файл со стилями, создаётся аввтоматически
  - index.html - результирующий файл с html разметкой, создаётся автоматически
  - files - папка с различными файлами, создаётся авотматически
- gulp - папка с данными для Gulp
  - сonfig - папка с файлами настроек Gulp
    - path - информаци о путях
  - tasks - папка с задачами Gulp
- node_modules - папка с зависимостями
- src - папка с исходными данными
  - html - папка с 
  - files - папка с различными файлами
  - sass - папка с SASS файлами
  - index.html - основной Html файл
- gulpfile.js - основной Gulp файл, с него начинается запуск Gulp
- package-lock.json
- package.json - файл с настройками проекта

<================================================================================================================>
<==================================================== ЗАДАЧИ ====================================================>
<================================================================================================================>

Работа Gulp заключается в выполнение ряда задач. Задача-Gulp - асинхронная функция, выполняющая опр. действия.
Каждую Gulp-задачу принято располагать в отдельном файле, а затем импортировать в gulpfile.

Задачи бывают 2х видов:
 1. Общедоступные - это задачи, которые экспортируются из gulpfile и могут быть вызваны отдельно командой gulp.
 2. Частные - это задачи, которые не экспортируются из gulpfile и не могут быть вывзваны отдельно.

Несколько задач могут быть запущены последовательно или параллельно:
 1. Паралельный запуск - series(задача_1, задача_2, ...)
 2. Последовательный запуск - parallel(задача_1, задача_2, ...)

<================================================================================================================>
<======================================= ВЗАИМОДЕЙСТВИЕ С ФАЙЛАМИ ПРОЕКТА =======================================>
<================================================================================================================>

Для взаимодействия с файлами проекта используются методы src, dest, а так же различные плагины совместо с pipe.

Метод src - создаёт поток на чтение данных из файлов/папок, расположенных по указанному пути.
Метод dest - создаёт поток на запись данных в файлы/папки, расположенные по указанному пути.
Метод pipe - объединяет потоки (в основном используется между src и dest для запуска плагинов).

<================================================================================================================>
<============================================== РАБОТА С ПЛАГИНАМИ ==============================================>
<================================================================================================================>

Плагины - это установленные отдельно дополнительные возможности Gulp

Используемые в работе плагины:
1. Утилита командной строки Gulp (устанавливается глобально): npm install --global gulp-cli
2. Сборщик Gulp: npm install --save-dev gulp
3. Удаление файлов: npm install --save-dev del
4. Локальный сервер: npm install --save-dev browser-sync
5. Поддержка SASS: npm install --save-dev sass gulp-sass
6. Переименование файлов: npm install --save-dev gulp-rename
7. Вендорные префиксы: npm install --save-dev gulp-autoprefixer
8. Группировка media-запросов: npm install --save-dev gulp-group-css-media-queries
9. Сжатие CSS файлов: npm install --save-dev gulp-clean-css
10. Препроцессор PUG: npm install --save-dev gulp-pug
11. Сборщик WebPack: npm install --save-dev webpack webpack-stream
12. Проверка картинок на обновление: npm install --save-dev gulp-newer
13. Конвертация шрифтов: npm install --save-dev gulp-fonter gulp-ttf2woff2
    На MacOS может возникнуть проблема с gulp-fonter. Исправление:
    node_modules/gulp-fonter/dist/index.js, В строке newFont.path = ... "\\" -> "/"


<================================================================================================================>
<======================================== НАБЛЮДЕНИЕ ЗА ФАЙЛАМИ ПРОЕКТА =========================================>
<================================================================================================================>

С помощью метода watch, Gulp позволяет отслеживать изменения в указанных файлах, а затем выполнять опр. задачи.

Первоначальный запуск watch будет ожидать первого изменения файла. Для того, чтобы задачи были выполнены сразу,
необходимо задать параметр: gulp.watch('ПУТЬ', { ignoreInitial: false }, ЗАДАЧА);